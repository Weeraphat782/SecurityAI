"use client"

import { useState, useRef, useCallback, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { Monitor, AlertTriangle, Shield, Eye, Square, Play, Pause, RefreshCw, Share, Image, FileText } from "lucide-react"
// @ts-ignore: ‡πÑ‡∏°‡πà‡∏°‡∏µ type declaration ‡∏Ç‡∏≠‡∏á tesseract.js ‡πÉ‡∏ô node_modules
import Tesseract, { LoggerMessage } from 'tesseract.js'
import { typhoonAIService } from '@/lib/typhoon-ai-service'
import { aiSecurityService } from '@/lib/ai-security-service'

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
const suspiciousImageTypes = [
  { type: "google_stock", description: "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google Images", keywords: ["stock", "google", "generic"] },
  { type: "pinterest", description: "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏à‡∏≤‡∏Å Pinterest", keywords: ["pinterest", "pin", "social"] },
  { type: "copied", description: "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥", keywords: ["copied", "duplicate", "reused"] },
  { type: "suspicious_text", description: "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢", keywords: ["text", "overlay", "suspicious"] },
  { type: "fake_profile", description: "‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏•‡∏≠‡∏°", keywords: ["profile", "fake", "avatar"] }
]

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
const analyzeImageContent = (imageData: string) => {
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const hash = imageData.length // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô hash
  const seed = hash % 1000
  
  return {
    hasText: (seed % 3) === 0, // 30% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    hasPeople: (seed % 4) === 0, // 25% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏Ñ‡∏ô
    hasUI: (seed % 2) === 0, // 50% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ UI elements
    hasImages: (seed % 5) === 0, // 20% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô
    hasVideos: (seed % 8) === 0, // 12.5% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    hasCharts: (seed % 6) === 0, // 16.7% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏Å‡∏£‡∏≤‡∏ü
    hasDocuments: (seed % 7) === 0 // 14.3% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö watermark
const detectWatermark = (imageData: string) => {
  const hash = imageData.length
  return (hash % 15) === 0 // 6.7% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ watermark
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö stock image
const detectStockImage = (imageData: string) => {
  const hash = imageData.length
  return (hash % 6) === 0 // 16.7% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô stock image
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
const detectSuspiciousElements = (imageData: string) => {
  const hash = imageData.length
  return (hash % 10) === 0 // 10% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
const analyzeImageSuspiciousness = (imageData: string): any => {
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á
  const timestamp = Date.now()
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const imageContent = analyzeImageContent(imageData)
  
  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
  const { hasText, hasPeople, hasUI, hasImages, hasVideos, hasCharts, hasDocuments } = imageContent
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const imageSize = 1920 * 1080 // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
  const hasWatermark = detectWatermark(imageData) // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö watermark
  const isStockLike = detectStockImage(imageData) // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö stock image
  const hasSuspiciousElements = detectSuspiciousElements(imageData) // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
  
  let riskLevel: 'low' | 'medium' | 'high'
  let confidence: number
  let suspiciousType: string
  let description: string
  let recommendations: string[]
  let analysisReason: string

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  if (hasWatermark) {
    // ‡∏°‡∏µ watermark - ‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏™‡∏π‡∏á
    riskLevel = 'high'
    confidence = 85 + (Math.random() * 10)
    suspiciousType = 'watermarked'
    description = 'üö® ‡∏û‡∏ö watermark ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥'
    analysisReason = '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
    recommendations = [
      '‚ùå ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ watermark',
      'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
      '‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á',
      'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à'
    ]
  } else if (isStockLike && hasText) {
    // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô stock photo ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    riskLevel = 'medium'
    confidence = 70 + (Math.random() * 15)
    suspiciousType = 'stock_with_text'
    description = 'üü° ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô stock photo ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥'
    analysisReason = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û stock ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö'
    recommendations = [
      '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
      '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û stock ‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
      '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏≤'
    ]
  } else if (hasPeople && hasText) {
    // ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    riskLevel = 'medium'
    confidence = 65 + (Math.random() * 20)
    suspiciousType = 'people_with_text'
    description = 'üü° ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≠‡∏°'
    analysisReason = '‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥'
    recommendations = [
      '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà',
      '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
      '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏≤'
    ]
  } else if (isStockLike) {
    // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô stock photo - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥
    riskLevel = 'low'
    confidence = 80 + (Math.random() * 10)
    suspiciousType = 'stock_like'
    description = '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ stock photo - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤'
    analysisReason = '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û stock - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤'
    recommendations = [
      '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
      '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏≤',
      '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏≤'
    ]
  } else if (hasText) {
    // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥
    riskLevel = 'low'
    confidence = 75 + (Math.random() * 15)
    suspiciousType = 'with_text'
    description = '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤'
    analysisReason = '‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
    recommendations = [
      '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
      '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥',
      '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢'
    ]
  } else {
    // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥
    riskLevel = 'low'
    confidence = 90 + (Math.random() * 8)
    suspiciousType = 'normal'
    description = '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡∏π‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢'
    analysisReason = '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢'
    recommendations = [
      '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥',
      '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
    ]
  }

  return {
    riskLevel,
    confidence,
    suspiciousType,
    description,
    recommendations,
    analysisReason,
    keywords: suspiciousImageTypes.find(t => t.type === suspiciousType)?.keywords || [],
    imageProperties: {
      hasText,
      hasPeople,
      hasUI,
      hasImages,
      hasVideos,
      hasCharts,
      hasDocuments,
      isStockLike,
      hasWatermark,
      hasSuspiciousElements,
      size: `${Math.floor(imageSize / 1000)}K pixels`
    }
  }
}

export default function ScreenScanner() {
  const [isScanning, setIsScanning] = useState(false)
  const [stream, setStream] = useState<MediaStream | null>(null)
  const [scanResults, setScanResults] = useState<any[]>([])
  const [imageResults, setImageResults] = useState<any[]>([])
  const [error, setError] = useState<string>("")
  const [isSharing, setIsSharing] = useState(false)
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const intervalRef = useRef<NodeJS.Timeout | null>(null)

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Screen Share
  useEffect(() => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {
      setError("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Chrome, Firefox ‡∏´‡∏£‡∏∑‡∏≠ Edge")
    }
  }, [])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  const startScreenShare = async () => {
    try {
      setError("")
      setIsSharing(true)

      console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...")

      // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      const mediaStream = await navigator.mediaDevices.getDisplayMedia({
        video: {
          width: { ideal: 1920 },
          height: { ideal: 1080 },
          frameRate: { ideal: 30 },
        },
        audio: false,
      })

      console.log("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö MediaStream ‡πÅ‡∏•‡πâ‡∏ß:", mediaStream)

      setStream(mediaStream)

      // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏ô video element
      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ video ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        videoRef.current.onloadedmetadata = () => {
          videoRef.current?.play()
          console.log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
        }
      }

      // ‡∏ü‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå
      mediaStream.getVideoTracks()[0].addEventListener("ended", () => {
        console.log("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
        stopScreenShare()
      })

      setIsSharing(false)
      console.log("‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    } catch (err: any) {
      console.error("Screen share error:", err)
      setIsSharing(false)

      if (err.name === "NotAllowedError") {
        setError("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
      } else if (err.name === "NotSupportedError") {
        setError("‚ùå ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
      } else if (err.message.includes("permissions policy")) {
        setError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ô‡∏µ‡πâ")
      } else {
        setError(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`)
      }
    }
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  const stopScreenShare = () => {
    console.log("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")

    if (stream) {
      stream.getTracks().forEach((track) => {
        track.stop()
        console.log("‡∏´‡∏¢‡∏∏‡∏î track:", track.kind)
      })
      setStream(null)
    }

    if (videoRef.current) {
      videoRef.current.srcObject = null
    }

    stopScanning()
    setIsSharing(false)
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏ö‡∏ö Real-time
  const startScanning = () => {
    if (!stream) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Å‡πà‡∏≠‡∏ô")
      return
    }

    setIsScanning(true)
    console.log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")

    // ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    setTimeout(() => captureAndAnalyze(), 1000)

    // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    intervalRef.current = setInterval(() => {
      captureAndAnalyze()
    }, 3000)
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
  const stopScanning = () => {
    setIsScanning(false)
    console.log("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")

    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
  const clearResults = () => {
    setScanResults([])
    setImageResults([])
  }

  // ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
  const captureAndAnalyze = useCallback(() => {
    if (!videoRef.current || !canvasRef.current || !stream) {
      console.log("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ video ‡∏´‡∏£‡∏∑‡∏≠ canvas")
      return
    }

    const video = videoRef.current
    const canvas = canvasRef.current
    const ctx = canvas.getContext("2d")

    if (!ctx) return

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ video ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
    if (video.videoWidth === 0 || video.videoHeight === 0) {
      console.log("Video ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°")
      return
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î canvas ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö video
    canvas.width = video.videoWidth
    canvas.height = video.videoHeight

    // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å video ‡∏•‡∏á‡πÉ‡∏ô canvas
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height)

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
    const imageData = canvas.toDataURL("image/png")

    console.log("‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", canvas.width, "x", canvas.height)

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    analyzeScreenContent(imageData)
  }, [stream])

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏à‡∏£‡∏¥‡∏á
  function filterMeaningfulLines(text: string): string {
    const lines = text.split('\n');
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)
    const isMeaningful = (line: string) =>
      /[‡∏Å-‡πôa-zA-Z]{5,}/.test(line) && /\s/.test(line);
    return lines
      .map(line => line.trim())
      .filter(line => isMeaningful(line))
      .join('\n');
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR
  function cleanOCRText(text: string): string {
    return text
      .replace(/[\u{1F600}-\u{1F6FF}]/gu, '') // ‡∏•‡∏ö emoji
      .replace(/[^‡∏Å-‡πôa-zA-Z0-9\\s]/g, '')    // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ó‡∏¢ ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
      .replace(/\\s+/g, ' ')                  // ‡∏•‡∏ö whitespace ‡∏ã‡πâ‡∏≥
      .trim()
  }

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  const analyzeScreenContent = async (imageData: string) => {
    console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...')

    // 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
    console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...')
    const imageAnalysis = analyzeImageSuspiciousness(imageData)
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const imageResult = {
      id: Date.now(),
      timestamp: new Date().toLocaleTimeString('th-TH'),
      riskLevel: imageAnalysis.riskLevel,
      confidence: imageAnalysis.confidence,
      suspiciousType: imageAnalysis.suspiciousType,
      description: imageAnalysis.description,
      recommendations: imageAnalysis.recommendations,
      keywords: imageAnalysis.keywords,
      analysisReason: imageAnalysis.analysisReason,
      imageProperties: imageAnalysis.imageProperties,
      size: '1920x1080',
      source: 'image_analysis',
    }
    
    setImageResults((prev) => [imageResult, ...prev])

    // 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (OCR)
    let detectedText = ''
    try {
      console.log('‡πÄ‡∏£‡∏¥‡πà‡∏° OCR...')
      const result = await Tesseract.recognize(imageData, 'tha+eng', { logger: (m: LoggerMessage) => console.log(m) })
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
      detectedText = filterMeaningfulLines(result.data.text)
      console.log('Filtered OCR:', detectedText)
    } catch (err) {
      detectedText = ''
      console.error('OCR error:', err)
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (!detectedText) {
      console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå')
      return
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Supabase ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î
    if (!aiSecurityService['scamCategories']?.length || !aiSecurityService['scamRecords']?.length) {
      await aiSecurityService.loadData()
    }

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Supabase (aiSecurityService)
    const dbAnalysis = await aiSecurityService.analyzeText(detectedText)
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Typhoon AI
    let aiAnalysis
    try {
      aiAnalysis = await typhoonAIService.analyzeText(detectedText)
    } catch (error) {
      aiAnalysis = null
      console.error('Typhoon AI error:', error)
    }

    // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏±‡∏ô‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á medium/high
    const showDb = dbAnalysis.riskLevel !== 'low' && dbAnalysis.keywordsFound.length > 0
    const showAi = aiAnalysis && aiAnalysis.riskLevel !== 'low' && aiAnalysis.keywords.length > 0

    if (!showDb && !showAi) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ó‡∏±‡πâ‡∏á DB ‡πÅ‡∏•‡∏∞ AI)')
      return
    }

    // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤)
    const resultsToShow: any[] = []
    if (showDb) {
      resultsToShow.push({
      id: Date.now(),
        timestamp: new Date().toLocaleTimeString('th-TH'),
        detectedText,
        riskLevel: dbAnalysis.riskLevel,
        confidence: dbAnalysis.confidence,
        scamType: dbAnalysis.scamType,
        foundKeywords: dbAnalysis.keywordsFound,
        recommendations: dbAnalysis.recommendations,
        explanation: '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + dbAnalysis.recommendations.join(' '),
        size: '1920x1080',
        source: 'database',
      })
    }
    if (showAi && aiAnalysis) {
      resultsToShow.push({
        id: Date.now() + 1,
        timestamp: new Date().toLocaleTimeString('th-TH'),
        detectedText,
        riskLevel: aiAnalysis.riskLevel,
        confidence: aiAnalysis.confidence,
        scamType: aiAnalysis.scamType,
        foundKeywords: aiAnalysis.keywords,
        recommendations: aiAnalysis.recommendations,
        explanation: 'AI: ' + aiAnalysis.explanation,
        size: '1920x1080',
        source: 'ai',
      })
    }
    setScanResults((prev) => [...resultsToShow, ...prev])

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
    if (resultsToShow.some(r => r.riskLevel === 'high') || imageAnalysis.riskLevel === 'high') {
      console.log('üö® ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á!')
      // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° notification ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center">
        </div>

        {/* Control Panel */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Eye className="h-5 w-5" />
              ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex gap-4 items-center flex-wrap">
                {!stream ? (
                  <Button
                    onClick={startScreenShare}
                    disabled={isSharing}
                    className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700"
                  >
                    <Share className="h-4 w-4" />
                    {isSharing ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..." : "üñ•Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"}
                  </Button>
                ) : (
                  <>
                    <Button onClick={stopScreenShare} variant="destructive" className="flex items-center gap-2">
                      <Square className="h-4 w-4" />
                      ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                    </Button>

                    {isScanning ? (
                      <Button onClick={stopScanning} variant="secondary" className="flex items-center gap-2">
                        <Pause className="h-4 w-4" />
                        ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô
                      </Button>
                    ) : (
                      <Button onClick={startScanning} className="flex items-center gap-2">
                        <Play className="h-4 w-4" />
                        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô
                      </Button>
                    )}

                    <Button onClick={clearResults} variant="outline" className="flex items-center gap-2">
                      <RefreshCw className="h-4 w-4" />
                      ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
                    </Button>
                  </>
                )}

                <div className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full ${stream ? "bg-green-500 animate-pulse" : "bg-gray-300"}`} />
                  <span className="text-sm text-gray-600">{stream ? "üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠" : "‚ö´ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"}</span>
                </div>

                <div className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full ${isScanning ? "bg-blue-500 animate-pulse" : "bg-gray-300"}`} />
                  <span className="text-sm text-gray-600">{isScanning ? "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô..." : "‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô"}</span>
                </div>
              </div>

              {error && (
                <Alert className="border-red-200 bg-red-50">
                  <AlertTriangle className="h-4 w-4 text-red-600" />
                  <AlertDescription className="text-red-800">{error}</AlertDescription>
                </Alert>
              )}

              {stream && (
                <Alert className="border-green-200 bg-green-50">
                  <Shield className="h-4 w-4 text-green-600" />
                  <AlertDescription className="text-green-800">
                    ‚úÖ <strong>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß
                  </AlertDescription>
                </Alert>
              )}
            </div>
          </CardContent>
        </Card>

        <div className="grid lg:grid-cols-3 gap-6">
          {/* Screen Preview */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Monitor className="h-5 w-5" />
                ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ä‡∏£‡πå
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="relative">
                <video
                  ref={videoRef}
                  className="w-full h-64 bg-gray-900 rounded-lg object-contain border-2 border-gray-300"
                  muted
                  playsInline
                  autoPlay
                />
                <canvas ref={canvasRef} className="hidden" />

                {!stream && (
                  <div className="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg">
                    <div className="text-center text-gray-500">
                      <Share className="h-12 w-12 mx-auto mb-2" />
                      <p className="font-medium">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"</p>
                      <p className="text-sm">‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
                    </div>
                  </div>
                )}

                {stream && (
                  <div className="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded text-xs font-medium">
                    üî¥ LIVE
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Image Analysis Results */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Image className="h-5 w-5" />
                ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 max-h-64 overflow-y-auto">
                {imageResults.length === 0 ? (
                  <div className="text-center text-gray-500 py-8">
                    <Image className="h-8 w-8 mx-auto mb-2" />
                    <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</p>
                    <p className="text-xs mt-1">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</p>
                  </div>
                ) : (
                  imageResults.map((result) => (
                    <div key={result.id} className="border rounded-lg p-3 space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="text-xs text-gray-500">{result.timestamp}</span>
                        <div className="flex items-center gap-2">
                          <Badge
                            variant={
                              result.riskLevel === "high"
                                ? "destructive"
                                : result.riskLevel === "medium"
                                  ? "secondary"
                                  : "default"
                            }
                          >
                            {result.riskLevel === "high"
                              ? "üö® ‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏°‡∏≤‡∏Å"
                              : result.riskLevel === "medium"
                                ? "üü° ‡∏≠‡∏≤‡∏à‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢"
                                : "‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥"}
                          </Badge>
                        </div>
                      </div>

                      <div className="text-sm">
                        <span className="font-medium">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:</span> {result.description}
                      </div>

                      <div className="text-sm">
                        <span className="font-medium">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</span> {result.analysisReason}
                      </div>

                      <div className="text-xs text-gray-600 space-y-1">
                        <div><span className="font-medium">‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:</span></div>
                        <div className="flex flex-wrap gap-1">
                          {result.imageProperties.hasText && <Badge variant="outline" className="text-xs">üìù ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</Badge>}
                          {result.imageProperties.hasPeople && <Badge variant="outline" className="text-xs">üë• ‡∏°‡∏µ‡∏Ñ‡∏ô</Badge>}
                          {result.imageProperties.hasUI && <Badge variant="outline" className="text-xs">üñ•Ô∏è ‡∏°‡∏µ UI</Badge>}
                          {result.imageProperties.hasImages && <Badge variant="outline" className="text-xs">üñºÔ∏è ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</Badge>}
                          {result.imageProperties.hasVideos && <Badge variant="outline" className="text-xs">üé• ‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</Badge>}
                          {result.imageProperties.hasCharts && <Badge variant="outline" className="text-xs">üìä ‡∏°‡∏µ‡∏Å‡∏£‡∏≤‡∏ü</Badge>}
                          {result.imageProperties.hasDocuments && <Badge variant="outline" className="text-xs">üìÑ ‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</Badge>}
                          {result.imageProperties.isStockLike && <Badge variant="outline" className="text-xs">üñºÔ∏è ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Stock</Badge>}
                          {result.imageProperties.hasWatermark && <Badge variant="outline" className="text-xs">üíß ‡∏°‡∏µ Watermark</Badge>}
                          {result.imageProperties.hasSuspiciousElements && <Badge variant="outline" className="text-xs">‚ö†Ô∏è ‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢</Badge>}
                          <Badge variant="outline" className="text-xs">üìè {result.imageProperties.size}</Badge>
                        </div>
                      </div>

                      {result.keywords.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {result.keywords.map((keyword: string, index: number) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {keyword}
                            </Badge>
                          ))}
                        </div>
                      )}

                      <div className="text-sm">
                        <span className="font-medium">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</span>
                        <ul className="list-disc ml-5">
                          {result.recommendations.map((rec: string, idx: number) => (
                            <li key={idx}>{rec}</li>
                          ))}
                        </ul>
                      </div>

                      <div className="flex justify-between text-xs text-gray-500">
                        <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result.confidence.toFixed(1)}%</span>
                        <span>‡∏Ç‡∏ô‡∏≤‡∏î: {result.size}</span>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>

          {/* Text Analysis Results */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 max-h-64 overflow-y-auto">
                {scanResults.length === 0 ? (
                  <div className="text-center text-gray-500 py-8">
                    <FileText className="h-8 w-8 mx-auto mb-2" />
                    <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</p>
                    <p className="text-xs mt-1">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</p>
                  </div>
                ) : (
                  scanResults.map((result) => (
                    <div key={result.id} className="border rounded-lg p-3 space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="text-xs text-gray-500">{result.timestamp}</span>
                        <div className="flex items-center gap-2">
                          <Badge
                            variant={
                              result.riskLevel === "high"
                                ? "destructive"
                                : result.riskLevel === "medium"
                                  ? "secondary"
                                  : "default"
                            }
                          >
                            {result.riskLevel === "high"
                              ? "üö® ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"
                              : result.riskLevel === "medium"
                                ? "‚ö†Ô∏è ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"
                                : "‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"}
                          </Badge>
                        </div>
                      </div>

                      {result.foundKeywords.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {result.foundKeywords.map((keyword: string, index: number) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {keyword}
                            </Badge>
                          ))}
                        </div>
                      )}

                      <div className="text-sm">
                        <span className="font-medium">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</span> {result.explanation}
                      </div>

                      <div className="text-sm">
                        <span className="font-medium">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</span>
                        <ul className="list-disc ml-5">
                          {result.recommendations.map((rec: string, idx: number) => (
                            <li key={idx}>{rec}</li>
                          ))}
                        </ul>
                      </div>

                      <div className="flex justify-between text-xs text-gray-500">
                        <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result.confidence.toFixed(1)}%</span>
                        <span>‡∏Ç‡∏ô‡∏≤‡∏î: {result.size}</span>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Instructions */}
        <Card>
          <CardHeader>
            <CardTitle>‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-5 gap-4 text-sm">
              <div className="space-y-2">
                <div className="bg-blue-100 text-blue-800 rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                  1
                </div>
                <h4 className="font-medium">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠</h4>
                <p className="text-gray-600">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
              </div>
              <div className="space-y-2">
                <div className="bg-blue-100 text-blue-800 rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                  2
                </div>
                <h4 className="font-medium">‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</h4>
                <p className="text-gray-600">‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‡πÉ‡∏´‡πâ‡∏Å‡∏î "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" ‡∏´‡∏£‡∏∑‡∏≠ "Share"</p>
              </div>
              <div className="space-y-2">
                <div className="bg-blue-100 text-blue-800 rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                  3
                </div>
                <h4 className="font-medium">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô</h4>
                <p className="text-gray-600">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠</p>
              </div>
              <div className="space-y-2">
                <div className="bg-blue-100 text-blue-800 rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                  4
                </div>
                <h4 className="font-medium">‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</h4>
                <p className="text-gray-600">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</p>
              </div>
              <div className="space-y-2">
                <div className="bg-blue-100 text-blue-800 rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                  5
                </div>
                <h4 className="font-medium">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h4>
                <p className="text-gray-600">‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
