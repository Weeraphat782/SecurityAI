export interface TyphoonAnalysisResult {
  isScam: boolean
  riskLevel: 'low' | 'medium' | 'high'
  confidence: number
  scamType: string
  keywords: string[]
  explanation: string
  recommendations: string[]
}

export class TyphoonAIService {
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Typhoon AI ‡∏ú‡πà‡∏≤‡∏ô API Route
  async analyzeText(text: string): Promise<TyphoonAnalysisResult> {
    if (!text || text.trim().length === 0) {
      return {
        isScam: false,
        riskLevel: 'low',
        confidence: 0,
        scamType: 'No Content',
        keywords: [],
        explanation: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
        recommendations: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå']
      }
    }

    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text })
      })

      if (!response.ok) {
        throw new Error('API request failed')
      }

      const analysis = await response.json()
      return analysis

    } catch (error) {
      console.error('Typhoon AI Error:', error)
      return this.fallbackAnalysis(text)
    }
  }

  // Fallback analysis ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Typhoon AI ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  private fallbackAnalysis(text: string): TyphoonAnalysisResult {
    const scamKeywords = [
      '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', '‡∏ü‡∏£‡∏µ', '‡∏Ñ‡∏•‡∏¥‡∏Å', '‡∏•‡∏¥‡∏á‡∏Å‡πå', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö',
      'OTP', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', '‡∏ï‡∏≥‡∏£‡∏ß‡∏à', '‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏ö', '‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡∏Å‡∏≥‡πÑ‡∏£',
      '‡∏´‡∏∏‡πâ‡∏ô', '‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï', '‡∏ö‡∏¥‡∏ó‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå', '‡πÅ‡∏à‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', 'iPhone'
    ]

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡πÄ‡∏â‡∏¢‡πÜ
    const contextAnalysis = this.analyzeContext(text, scamKeywords)
    const foundKeywords = contextAnalysis.suspiciousKeywords
    const suspiciousSentences = contextAnalysis.suspiciousSentences

    const riskLevel = suspiciousSentences.length > 1 ? 'high' : 
                     suspiciousSentences.length > 0 ? 'medium' : 'low'

    const confidence = Math.min(suspiciousSentences.length * 25, 80)

    return {
      isScam: suspiciousSentences.length > 0,
      riskLevel,
      confidence,
      scamType: this.identifyScamType(foundKeywords),
      keywords: foundKeywords,
      explanation: suspiciousSentences.length > 0 ? 
        `‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏á‡∏™‡∏±‡∏¢: ${suspiciousSentences.join('; ')}` : 
        '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á',
      recommendations: this.generateRecommendations(riskLevel, foundKeywords)
    }
  }

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
  private analyzeContext(text: string, keywords: string[]): {
    suspiciousKeywords: string[]
    suspiciousSentences: string[]
  } {
    const suspiciousKeywords: string[] = []
    const suspiciousSentences: string[] = []
    
    // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
    const sentences = text.split(/[.!?‡•§]/).filter(s => s.trim().length > 0)
    
    for (const sentence of sentences) {
      const sentenceLower = sentence.toLowerCase()
      const foundInSentence = keywords.filter(keyword => 
        sentenceLower.includes(keyword.toLowerCase())
      )
      
      if (foundInSentence.length > 0) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ß‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isSuspicious = this.isSentenceSuspicious(sentence, foundInSentence)
        
        if (isSuspicious) {
          suspiciousKeywords.push(...foundInSentence)
          suspiciousSentences.push(sentence.trim())
        }
      }
    }
    
    return {
      suspiciousKeywords: [...new Set(suspiciousKeywords)],
      suspiciousSentences
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  private isSentenceSuspicious(sentence: string, keywords: string[]): boolean {
    const sentenceLower = sentence.toLowerCase()
    
    // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const safeIndicators = [
      '‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£', '‡∏Ç‡πà‡∏≤‡∏ß', '‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°', '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', '‡∏ß‡∏¥‡∏à‡∏±‡∏¢', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
      '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®', '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢', '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢', '‡∏Å.‡∏•.‡∏ï.', '‡∏ï‡∏≥‡∏£‡∏ß‡∏à', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£',
      '‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£', 'https://', 'www.', '.gov.th', '.ac.th'
    ]
    
    // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á
    const scamIndicators = [
      '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô', '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏ç‡πà', '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏•', '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©', '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì',
      '‡∏ü‡∏£‡∏µ 100%', '‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', '‡∏ü‡∏£‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç', '‡∏ü‡∏£‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢',
      '‡∏Å‡∏≥‡πÑ‡∏£ 500%', '‡∏Å‡∏≥‡πÑ‡∏£ 1000%', '‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏•', '‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
      '‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô 1000 ‡πÑ‡∏î‡πâ 10000',
      '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö', '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏≠‡∏ô', '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
      'OTP ‡∏î‡πà‡∏ß‡∏ô', '‡∏£‡∏´‡∏±‡∏™ OTP', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP', '‡∏™‡πà‡∏á OTP',
      '‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏ö', '‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö', '‡∏Ñ‡∏î‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°', '‡∏ñ‡∏π‡∏Å‡∏ü‡πâ‡∏≠‡∏á', '‡∏ñ‡∏π‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Ñ‡∏î‡∏µ',
      '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö', '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å', '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'
    ]
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const hasSafeIndicator = safeIndicators.some(indicator => 
      sentenceLower.includes(indicator.toLowerCase())
    )
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á
    const hasScamIndicator = scamIndicators.some(indicator => 
      sentenceLower.includes(indicator.toLowerCase())
    )
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á
    const hasUrgency = /(‡∏î‡πà‡∏ß‡∏ô|‡∏ó‡∏±‡∏ô‡∏ó‡∏µ|‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ|‡∏†‡∏≤‡∏¢‡πÉ‡∏ô|‡∏£‡∏µ‡∏ö|‡πÄ‡∏£‡πà‡∏á|‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)/i.test(sentence)
    const hasPressure = /(‡∏ï‡πâ‡∏≠‡∏á|‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô|‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç|‡∏Ç‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ|‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏•‡∏≤‡∏î)/i.test(sentence)
    const hasMoney = /(‡πÄ‡∏á‡∏¥‡∏ô|‡∏ö‡∏≤‡∏ó)/i.test(sentence)
    const hasAction = /(‡∏Ñ‡∏•‡∏¥‡∏Å|‡∏Å‡∏î|‡πÇ‡∏≠‡∏ô|‡∏™‡πà‡∏á|‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô|‡πÉ‡∏´‡πâ)/i.test(sentence)
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    if (hasSafeIndicator) {
      return false
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    if (hasScamIndicator) {
      return true
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á
    const urgencyScore = hasUrgency ? 2 : 0
    const pressureScore = hasPressure ? 2 : 0
    const moneyScore = hasMoney ? 1 : 0
    const actionScore = hasAction ? 1 : 0
    const keywordScore = keywords.length
    
    const totalScore = urgencyScore + pressureScore + moneyScore + actionScore + keywordScore
    
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏≠‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏á‡∏™‡∏±‡∏¢
    return totalScore >= 4
  }

  private identifyScamType(keywords: string[]): string {
    if (keywords.includes('‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£') || keywords.includes('OTP')) return 'Call Center Scam'
    if (keywords.includes('‡∏Ñ‡∏•‡∏¥‡∏Å') || keywords.includes('‡∏•‡∏¥‡∏á‡∏Å‡πå')) return 'Phishing Link'
    if (keywords.includes('‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•') || keywords.includes('‡πÅ‡∏à‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•')) return 'Social Media Scam'
    if (keywords.includes('‡∏•‡∏á‡∏ó‡∏∏‡∏ô') || keywords.includes('‡∏Å‡∏≥‡πÑ‡∏£')) return 'Investment Scam'
    return 'Unknown Scam Type'
  }

  private generateRecommendations(riskLevel: string, keywords: string[]): string[] {
    const recommendations = []

    if (riskLevel === 'high') {
      recommendations.push('‚ö†Ô∏è ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á! ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ')
      recommendations.push('üîí ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, OTP, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£')
      recommendations.push('üí∞ ‡∏≠‡∏¢‡πà‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÉ‡∏î‡πÜ')
    } else if (riskLevel === 'medium') {
      recommendations.push('‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≥ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£')
      recommendations.push('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à')
    } else {
      recommendations.push('‚úÖ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡∏π‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏™‡∏°‡∏≠')
    }

    return recommendations
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chatbot
  async analyzeForChatbot(userMessage: string): Promise<{
    response: string
    scamDetected: boolean
    riskLevel: 'low' | 'medium' | 'high' | null
  }> {
    const analysis = await this.analyzeText(userMessage)
    
    let response = ''
    if (analysis.riskLevel === 'high') {
      response = `‚ö†Ô∏è **‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á!**\n\n${analysis.recommendations.join('\n')}\n\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${analysis.scamType}\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${analysis.confidence.toFixed(1)}%`
    } else if (analysis.riskLevel === 'medium') {
      response = `‚ö†Ô∏è **‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≥**\n\n${analysis.recommendations.join('\n')}\n\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${analysis.scamType}\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${analysis.confidence.toFixed(1)}%`
    } else {
      response = `‚úÖ **‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡∏π‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢**\n\n${analysis.recommendations.join('\n')}`
    }

    return {
      response,
      scamDetected: analysis.isScam,
      riskLevel: analysis.riskLevel
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
export const typhoonAIService = new TyphoonAIService() 